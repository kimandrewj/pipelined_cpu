module DE1_SoC (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW); 
	input  logic         CLOCK_50; // 50MHz clock. 
	output logic  [6:0]  HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;  
	output logic  [9:0]  LEDR; 
	input  logic  [3:0]  KEY; // True when not pressed, False when pressed 
	input  logic  [9:0]  SW; 
	
	assign HEX1 = 7'b1111111; 
	assign HEX2 = 7'b1111111; 
	assign HEX3 = 7'b1111111; 
	assign HEX4 = 7'b1111111; 
	assign HEX5 = 7'b1111111; 
	
	logic key3In, key0In, leftButton, rightButton; 
	
	flipFlop ff_left (.clk(CLOCK_50), .reset(SW[9]), .D(~KEY[3]), .O(key3In));
	flipFlop ff_right (.clk(CLOCK_50), .reset(SW[9]), .D(~KEY[0]), .O(key0In));
	
	userInput userLeft (.clk(CLOCK_50), .reset(SW[9]), .D(key3In), .O(leftButton));
	userInput userRight (.clk(CLOCK_50), .reset(SW[9]), .D(key0In), .O(rightButton));
	
	normalLight ledOne (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[2]), .NR(LEDR[0]), .lightOn(LEDR[1]));
	normalLight ledTwo (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[3]), .NR(LEDR[1]), .lightOn(LEDR[2]));
	normalLight ledThree (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[4]), .NR(LEDR[2]), .lightOn(LEDR[3]));
	normalLight ledFour (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[5]), .NR(LEDR[3]), .lightOn(LEDR[4]));
	normalLight ledSix (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[7]), .NR(LEDR[5]), .lightOn(LEDR[6]));
	normalLight ledSeven (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[8]), .NR(LEDR[6]), .lightOn(LEDR[7]));
	normalLight ledEight (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[9]), .NR(LEDR[7]), .lightOn(LEDR[8]));
	normalLight ledNine (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[0]), .NR(LEDR[8]), .lightOn(LEDR[9]));
	centerLight ledFive (.Clock(CLOCK_50), .Reset(SW[9]), .L(leftButton), .R(rightButton), .NL(LEDR[6]), .NR(LEDR[4]), .lightOn(LEDR[5]));
	
	winCondition win (.clk(CLOCK_50), .reset(SW[9]), .L1(LEDR[1]), .L9(LEDR[9]), .L(leftButton), .R(rightButton), .winner(HEX0));
	
	
endmodule


module DE1_SoC_testbench();      
	 logic  [9:0]  LEDR;     
	 logic  [4:0]  KEY; 
	 logic  [9:0]  SW; 
	 logic clk, reset; 
	  
	 DE1_SoC s (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);  
		
	 // Set up a simulated clock.   
	 parameter CLOCK_PERIOD=100;  
	 initial begin   
	  clk <= 0;  
	  forever #(CLOCK_PERIOD/2) clk <= ~clk;
	 end  
		
	 // Test the design. 
		initial begin   
					
			SW[9] <= 1;   @(posedge clk); 
			SW[9] <= 0;   @(posedge clk); 
			KEY[0] <= 1; KEY[3] <= 0;    repeat(5) @(posedge clk); 
								 
			KEY[3] <= 1; KEY[0] <= 0;    repeat(5) @(posedge clk); 
												 
			SW[1] <= 0; SW[0] <= 0;   repeat(2) @(posedge clk); 
												 
			
			$stop; // End the simulation.  
		end  
endmodule
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	